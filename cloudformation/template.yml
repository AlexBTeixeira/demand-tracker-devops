AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Provisiona a infraestrutura para a aplicação Demand Tracker (VPC, EC2, RDS, S3) utilizando AWS CloudFormation e levando em conta as limitações do Perfil de estudante.

Parameters:
  GitHubRepoURL:
    Type: String
    Description: A URL HTTPS completa do seu repositório privado no GitHub.

  GitHubPAT:
    Type: String
    Description: Seu GitHub Personal Access Token (PAT) com permissão para clonar o repositório.
    NoEcho: true   # não aparece no console

  DBPassword:
    Type: String
    Description: Senha para o banco de dados RDS (mínimo 8 caracteres alfanuméricos).
    NoEcho: true
    MinLength: 8
    AllowedPattern: "[a-zA-Z0-9]+"   # alfanuméricos apenas
  
  SSHKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Nome do seu par de chaves EC2 existente na região para acesso SSH.

  MyIP:
    Type: String
    Description: Seu endereço IP para acesso SSH.
    Default: 0.0.0.0/0   # Fica aberto como default, mas é melhor restringir depois

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: The latest Amazon Linux 2 AMI ID for the region. Do not change.

Resources:
  # --- 1. REDE (VPC, SUBNETS, GATEWAYS, ROUTING) ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16   # Faixa de IPs da VPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24   # Subnet pública 
      MapPublicIpOnLaunch: true
      AvailabilityZone: "us-east-1a"   # Zona de disponibilidade
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24   # Subnet privada
      AvailabilityZone: "us-east-1a"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetA

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24   # Outra subnet privada, para alta disponibilidade
      AvailabilityZone: "us-east-1b"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnetB

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
  
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0   # Rota padrão para a internet
      GatewayId: !Ref InternetGateway
  
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # --- 2. GRUPOS DE SEGURANÇA ---
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows SSH and App access to the EC2 instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22   # Porta SSH
          ToPort: 22
          CidrIp: !Ref MyIP   # Restrição de IP para SSH 
        - IpProtocol: tcp
          FromPort: 5050   # Porta que a aplicação Flask vai rodar
          ToPort: 5050
          CidrIp: 0.0.0.0/0  
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-EC2-SG

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows MySQL access from the EC2 instance"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306   # Porta padrão do MySQL
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId   # Só a EC2 pode acessar
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDS-SG

  # --- OBS: Eu tirei o Secrets Manager pq tava dando problema devido as permissões do AWS Academy ---
  # A solução foi usar o parâmetro direto, não é o ideal, mas é o que temos.

  # --- 3. S3, EC2, RDS ---
  AttachmentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "demand-tracker-attachments-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private   # Bucket privado

  AppServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro   # Usando free tier para economizar
      KeyName: !Ref SSHKeyName
      ImageId: !Ref LatestAmiId
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: "LabInstanceProfile"   # Já vem no AWS Academy, não posso criar outros
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Atualiza pacotes
          yum update -y
          yum install -y git python3 python3-pip mysql gcc python3-devel mariadb-devel
          pip3 install --upgrade pip
          
          # Clona o repositório do GitHub usando o PAT direto
          REPO_PATH=$(echo "${GitHubRepoURL}" | sed 's|https://||')
          git clone https://${GitHubPAT}@${!REPO_PATH} /home/ec2-user/app
          
          chown -R ec2-user:ec2-user /home/ec2-user/app
          
          cd /home/ec2-user/app
          pip3 install -r requirements.txt   # instala libs do Python
          
          # Espera o RDS ficar pronto (loop básico)
          while ! mysql -h ${AppDatabase.Endpoint.Address} -u admin -p${DBPassword} -e "SELECT 1"; do
            echo "Aguardando o banco de dados ficar disponível..."
            sleep 5
          done
          
          # Cria as tabelas do banco
          mysql -h ${AppDatabase.Endpoint.Address} -u admin -p${DBPassword} demandtrackerdb < sql/schema.sql

          SECRET_KEY=$(openssl rand -hex 16)   # Cria secret da app Flask

          # Cria o serviço do gunicorn pra rodar a aplicação
          cat > /etc/systemd/system/demand-tracker.service <<EOF
          [Unit]
          Description=Gunicorn instance to serve Demand Tracker
          After=network.target

          [Service]
          User=ec2-user
          Group=ec2-user
          WorkingDirectory=/home/ec2-user/app
          Environment="MYSQL_HOST=${AppDatabase.Endpoint.Address}"
          Environment="MYSQL_USER=admin"
          Environment="MYSQL_PASSWORD=${DBPassword}"
          Environment="MYSQL_DB=demandtrackerdb"
          Environment="S3_BUCKET=${AttachmentsBucket}"
          Environment="SECRET_KEY=${!SECRET_KEY}"
          ExecStart=/usr/local/bin/gunicorn --workers 3 --bind 0.0.0.0:5050 wsgi:app

          [Install]
          WantedBy=multi-user.target
          EOF

          systemctl daemon-reload
          systemctl enable demand-tracker.service
          systemctl start demand-tracker.service
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AppServer

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS"
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB   # Outra subnet privada para alta disponibilidade
  
  AppDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${AWS::StackName}-db"
      DBName: demandtrackerdb 
      AllocatedStorage: 20   # 20 GB
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: "8.0"
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false   # Não expõe o banco na internet
      MultiAZ: false   # Não usa Multi-AZ para economizar
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Database

Outputs:
  EC2PublicIP:
    Description: "IP Público do servidor da aplicação"
    Value: !GetAtt AppServerInstance.PublicIp
  RDSEndpoint:
    Description: "Endpoint do banco de dados RDS"
    Value: !GetAtt AppDatabase.Endpoint.Address
  S3BucketName:
    Description: "Nome do bucket S3 para anexos"
    Value: !Ref AttachmentsBucket
